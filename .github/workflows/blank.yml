name: CI Pipeline for NestJS

# Define cuándo se ejecutará el pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Definir trabajos (jobs)
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configurar Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      # 3. Instalar dependencias
      - name: Install dependencies
        run: npm install

      # 4. Verificar linting
      - name: Run Lint
        run: npm run lint

      # 5. Compilar el proyecto
      - name: Build project
        run: npm run build

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # 1. Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configurar PostgreSQL en Docker
      - name: Set up PostgreSQL
        uses: docker://postgres:latest
        with:
          args: -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=solocali123# -e POSTGRES_DB=proyect_nest -p 5432:5432

      # 3. Esperar a que PostgreSQL esté listo para aceptar conexiones
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      # 4. Desplegar la aplicación
      - name: Deploy application
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: solocali123#
          DB_DATABASE: proyect_nest
          NODE_ENV: production
        run: |
          echo "Desplegando la aplicación"
          # Agrega los comandos necesarios para desplegar la aplicación.
